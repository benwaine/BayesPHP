<?php

namespace BayesPHP;
use \Mockery as m;

/**
 * Test class for Sample.
 * Generated by PHPUnit on 2011-05-25 at 15:51:41.
 */
class SampleTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Sample
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $stemer = m::mock('\BayesPHP\Stemer');
        $counter = m::mock('\BayesPHP\WordCounter');

        $this->object = new Sample($stemer, $counter);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        m::close();
    }

    /**
     * @expectedException \BayesPHP\Exception\BadArgument
     */
    public function testSetSampleUsingIncorrectFormat()
    {

        $sample = array('x' => array(), 'z' => array());
        $this->object->setSample($sample);
    }

    /**
     * @expectedException \BayesPHP\Exception\BadArgument
     */
    public function testSetSampleUsingUnequalSamples()
    {
        $sample = array('p' => array('test', 'test2'), 'n' => array('test'));
        $this->object->setSample($sample);
    }

    public function testProcessProducesCorrectOutcomes()
    {
        // Sample  array must contain 8 samples
        // This test is testing 'the maths' in the sample class.
        // The actual word counting and steming are done in the calaberators
        $sample = array('p' => array('one', 'two', 'three', 'four'),
                        'n' => array('one', 'two', 'three', 'four')
                  );

        $wordCounter = m::mock('\BayesPHP\WordCounter');

        $wCount1 =
                array(
                    'the' => 3,
                    'fox' => 4,
                    'good' => 4,
                    'greedy' => 1);

        $wCount2 =
                array(
                    'the' => 2,
                    'fox' => 4,
                    'good' => 1,
                    'greedy' => 4);

        $wordCounter->shouldReceive('addToSample', 'reset')->zeroOrMoreTimes();
        $wordCounter->shouldReceive('getWordCounts')
                ->twice()
                ->andReturn($wCount1, $wCount2);

        $stemer = m::mock('\BayesPHP\Stemer');
        $stemer->shouldReceive('process')->times(8);

        $sampler = new Sample($stemer, $wordCounter);
        $sampler->setSample($sample);
        $result = $sampler->process();

        $this->assertType('\BayesPHP\Sample\Result', $result);

        $expected = array(
            'fox' => array(
                'p' => 1,
                'n' => 1),
            'good' => array(
                'p' => 1,
                'n' => 0.25),
            'greedy' => array(
                'p' => 0.25,
                'n' => 1),
            'the' => array(
                'p' => 0.75,
                'n' => 0.5),
        );


        $this->assertEquals($expected, $result->getAllProbabilities());

    }

}

?>
